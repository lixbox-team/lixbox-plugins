// Initialisation des plugins
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
        classpath 'org.owasp:dependency-check-gradle:6.2.2'
        classpath 'org.postgresql:postgresql:42.2.23'
        classpath('com.google.guava:guava:28.0-jre')
    }
}
plugins {
    id "com.github.jk1.dependency-license-report" version "1.17"
    id "org.ajoberstar.grgit" version "3.1.1"
    id "com.github.spotbugs" version "4.7.3"
    id 'maven-publish'
}

//Global configuration
apply plugin: "org.sonarqube"

println "infos artifactory: "+System.getProperty("jenkins.login")

ext.env = project.hasProperty("env") ? project.getProperty("env") : "local"
println "Loading configuration for environment '$ext.env'...."
def configFile = file("$rootDir/gradle/config/environment.groovy")
def parsedConfig = new ConfigSlurper(ext.env).parse(configFile.toURL())
def configDir = new File(rootDir, '/config/checkstyle/checkstyle.xml')
ext.config = parsedConfig
group = "${config.desc_project.artefact.group}"
ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
def fix_version = "$config.desc_project.version.majorVersion"+"."+
				  "$config.desc_project.version.mediumVersion"+"."+
				  "$config.desc_project.version.minorVersion"+"."
fix_version += System.env.SOURCE_BUILD_NUMBER!=null?System.env.SOURCE_BUILD_NUMBER:Calendar.getInstance().getTimeInMillis();
def jarRepoUrl = "$config.pic.artifactory.uri/$config.repository.artifactory.libsRelease"
def releasesRepoUrl = "$config.pic.artifactory.uri/$config.repository.artifactory.release"
def snapshotsRepoUrl = "$config.pic.artifactory.uri/$config.repository.artifactory.snapshot"
def maven_url = ext.env.equals('prod') ? releasesRepoUrl:snapshotsRepoUrl
def isProd=ext.env.equals('prod') 

import org.ajoberstar.grgit.Credentials
import  org.ajoberstar.grgit.Person
import  org.apache.commons.io.IOUtils
import groovy.io.FileType

apply from: 'gradle/project-critical-update.gradle'  

sonarqube  {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.verbose", "true"
        property "sonar.projectName", "${config.desc_project.artefact.project}"
        property "sonar.projectKey", "${config.desc_project.artefact.projectKey}"
        property "sonar.host.url", "${config.pic.sonar.uri}"
        property "sonar.login", System.getProperty("jenkins.login")
        property "sonar.password", System.getProperty("jenkins.password")
    }
}

allprojects { 
    apply plugin:'base'
    group = "$config.desc_project.artefact.group"    
    version=fix_version
    repositories{
        mavenLocal()
        mavenCentral()
        maven{
            url jarRepoUrl
            credentials{
                username = System.getProperty("jenkins.login")
                password = System.getProperty("jenkins.password")
            }
        }
    }       
    task cleanDownloadDir(type: Delete) { delete "$buildDir/download" }
}



task tagRelease() {
    doLast {
        def gitToken = System.getProperty("git.token")
        def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir, credentials: new Credentials(gitToken, ""))
        def tagger = new Person(name:"lixtec bot", email:"lixtec-bot@lixtec.fr")
        grgit.tag.add{
            name="$project.version"
            message="Release of $project.version"
            force=true
            tagger=tagger
        }
        grgit.push(tags:true)
        println("VERSION $project.version IS TAGGED AND RELEASED")
    }
}

subprojects {
	//Plugins	
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'eclipse-wtp'
    apply plugin: 'com.github.jk1.dependency-license-report'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
	        maven{
	            url snapshotsRepoUrl
	            credentials{
	                username = System.getProperty("jenkins.login")
	                password = System.getProperty("jenkins.password")
	            }
	        }
    }

    task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from javadoc
	}
	
	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	java {
	    withJavadocJar()
	    withSourcesJar()
	}
        
	signing {
	    sign configurations.archives
	}
        
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                    pom {
		                name = project.name
		                description = 'Lixbox plugins'
		                url = 'https://github.com/lixbox-team/lixbox-plugins'
		                licenses {
		                    license {
		                        name = 'The Apache License, Version 2.0'
		                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
		                    }
		                }
		                developers {
		                    developer {
		                        id = 'ludovic.terral'
		                        name = 'Ludovic TERRAL'
		                        email = 'ludovic.terral@lixtec.fr'
		                    }
		                }
		                scm {
		                    connection = 'scm:git:git://github.com/lixbox-team/lixbox-plugins.git'
		                    developerConnection = 'scm:git:ssh://github.com/lixbox-team/lixbox-plugins.git'
		                    url = 'https://github.com/lixbox-team/lixbox-plugins'
		                }
		            }
                }
            }
        }
        repositories {
            maven {
                url maven_url
                credentials{
	                username = System.getProperty("jenkins.login")
	                password = System.getProperty("jenkins.password")
                }
            }
            if (isProd)
            {
    			maven {
	                url config.pic.mavencentral.uri
	                credentials{
		                username = System.getProperty("mavencentral.login")
		                password = System.getProperty("mavencentral.password")
	                }
           		 }
			}
        }
    }
    
    sourceCompatibility = 11
    targetCompatibility = 11
    compileJava.options.encoding = 'UTF-8'
    
    
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Test) {
        systemProperty "file.encoding", "utf-8"
    }
    
    eclipseWtp.doLast{
        File f = file('.settings/org.eclipse.core.resources.prefs')
        f.write('eclipse.preferences.version=1\n')
        f.append('encoding/<project>=UTF-8')
    }
    
    eclipse {
        project {
            natures 'org.eclipse.buildship.core.gradleprojectnature'
            buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
        }
        classpath.file {
            beforeMerged { classpath ->
                classpath.entries.clear()
            }
        }
        classpath {
            defaultOutputDir = file('bin/main')
            file.withXml { n ->
                n.asNode().classpathentry.findAll { it.@path.contains('est') }
                        .each { it.@output = 'bin/test' }
            }
            file.withXml { n ->
                n.asNode().classpathentry.findAll { it.@path.contains('webapp') }
                        .each { it.@output = 'bin/webapp' }
            }
            file.withXml {n -> 
                n.asNode().classpathentry.findAll{it.@path.contains('est') }
                        .each{it.appendNode('attributes')
                            .appendNode('attribute',[name: 'org.eclipse.jst.component.nondependency',value: ''])}
            }
            file.whenMerged {
                entries.each {
                    source ->
                        // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
                        if (source.kind == 'src' && source.toString().contains('output') && source.output.contains('bin/main_')) {
                            source.output = 'bin/main'
                        }
                }
            }
        }
        eclipse.wtp.component.file {
            beforeMerged { wtpComponent ->
                wtpComponent.wbModuleEntries.clear()
            }
        }
    }
    
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco")
        }
    }

    spotbugs {
        effort = 'max'
        excludeFilter=file('../gradle/config/findbugsExcludeFilter.xml')
    }
    
	spotbugsMain.reports {
	        html .enabled = true
	            xml.enabled false
	}
    
    jar{
        manifest {
            attributes("Implementation-Title": "${config.desc_project.artefact.group}.${rootProject.name}:${project.name}",
                       "Implementation-Version": version)
        }
    }   
    
    
	test{
		forkEvery 1
		beforeTest { descr ->
			logger.warn("Starting Test ${descr.className} : ${descr.name}")
		}
        ignoreFailures = false        
	} 
    test.finalizedBy(jacocoTestReport);

		    
	//Couverture de code {jacoco}
	task jacocoIntegrationTestReport(type:JacocoReport){
		sourceSets sourceSets.main
	}
    
    
    //Analyse des vulnérabilités
    dependencyCheck {
        data {
            driver="org.postgresql.Driver"
            connectionString="jdbc:postgresql://owasp.service.lixtec.fr:54320/owasp"
            username=System.getProperty("jenkins.login")
            password=System.getProperty("jenkins.password")
        }
        analyzers{
            centralEnabled=false
            retirejs{enabled=false}
        }
        failBuildOnCVSS=0
        suppressionFile = "$rootDir/gradle/config/owasp-suppressions.xml"        
        autoUpdate=false;
        outputDirectory="$projectDir/build/reports/dependency-check";
    }
    
    
    //Modification des worflows de taches
    if("prod".equals(project.getProperty("env"))) {
        tasks.publish.finalizedBy(tagRelease);
    }
    tasks.publish.dependsOn javadocJar
    tasks.publish.dependsOn sourcesJar
    
    tasks.eclipse.dependsOn tasks.cleanEclipse    
    tasks.check.dependsOn(tasks.generateLicenseReport);
    tasks.check.dependsOn(tasks.dependencyCheckAnalyze);
}